# A* Algorithm

# 1. Neighbors_and_weights can be an adjacency / weights list
#   a. Weights will hold temporal value
#   b. Want to reduce memory by implementing list of arrays rahter then nxn matrix.
#      weights[node[i].key] = ((neighbor1.key, weight), (neighbor2.key, weight), ... )
# 2. An array pathTO will be used to keep track of our optimal route

v = 5                               # length of nodes - test value 5
Neighbors_and_Weights = v*[]        # TBD
pathTo = v*[-1]                     # keeps track of optimal path

class Node:                                                  # the node's index in the list will be its key
    def __init__(self, key, x_coord, y_coord, neighbors_and_weights = []):  
        self.key = key                                       # needed to record pathTo
        self.x_coord = x_coord                               # coordinates to be used to determine distance(probably)
        self.y_coord = y_coord
        self.neighbors_and_weights = []                      # neighbors and weights adjacency list
        self.g_score = 'inf'                                 # score of path from starting point to this vertex - TBD      
        self.f_score = 'inf'                                 # f_score = g_score + h_score
		
        # a. Maybe we could add another property here for pre-processing(something like "reach")
        #    Possibly employ some kind of density value of time per unit length since we have a time based metric
        # b. Can also add other values here as we need
            
def Heuristic(current_node, terminal_node):    # determines h_score - score of path from this vertex to terminal point - Euclidean
    current = current_node    # initial walking speed ~ 30 seconds per 50 meters(unit length) 
    goal = terminal_node      # can change this according to our map and increasing number of nodes
	
	Euclidean = math.sqrt(abs(current.x_coord - goal.x_coord)**2 + abs(current.y_coord - goal.y_coord)**2))
	h_score = Euclidean * 0.5            # half a minute(30 seconds) per unit length
	
    return h_score                       # so all our scores will be in minutes
    
def retrieve_path(pathTo, start, end):     # returns path
    parent = pathTo[end]
    print end
    while  parent != start:
        print parent
        parent = pathTo[parent]
    print start
    
# 3. F_score = g_score + h_score will be determined at each iteration
# 4. Will use "sets" as our data structure because of its innate prowess at finding if a key exists in the set
#   a. Sets are also good for finding the min value, which we will use for f_score
# 5. Will need to check for out of bounds (starting and ending points)

def A_star(Nodes, start, end):
    if start < 0 | start > v:
        return "The starting point doesn't exist in UCLA!"
    if end < 0 | end > v:
        return "The end point doesn't exist in UCLA!"
    
    closed_set = set()     # will store nodes that are visited
    open_set = set()       # will store nodes that are neighbors in the optimal path (minimaum f_score)
    
    goal = Nodes[end]
    entry = Nodes[start]  # starting node
    entry.g_score = 0     # starting node g_score is 0
    entry.f_score = Heuristic(entry, goal)   # starting node f_score = g_score + h_score 
    open_set.add(entry)
    
    while (len(open_set) > 0):
        current = min(openset, f_score) # pick node with lowest f_score- ***I am unsure if this is the correct syntax***
        
        if current == goal:
            return current.f_score      # returns estimated time to get to end node - *** can function return 2 different value types? ***
        
        open_set.remove(current)        # remove chosen node from open_set
        close_set.add(current)          # add chosen node to closed_set
        
        for i in current.neighbors_and_weights:
            if Nodes[i[0]] in closed_set:    # if Nodes[neighbor.key] is in closed set - do nothing
                continue                     
                                             # i[1] = weight of edge between current and neighbor
            g_new = current.g_score + i[1]   # compute new g_score
            
            if Nodes[i[0]] in open_set:           # if there is a duplicate of Nodes[neighbor.key] in open_set
                if Nodes[i[0]].g_score > g_new:   # compare new g_score and update if new score is lower
                    Nodes[i[0]].g_score = g_new
                    
            else:
                Nodes[i[0]].g_score = g_new                                 # if in neither, update g_score
                Nodes[i[0]].f_score = g_new + Heuristic(Nodes[i[0]], goal)  # calculate h_score and f_score
                pathTo[i] = current.key                                     # record path to parent
                open_set.add(Nodes[i[0]])                                   # add to open_set
                
    # Will not need to return anything here as our graph will be connected and therefore will always find a path.